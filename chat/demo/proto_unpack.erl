-module (proto_unpack). 
-compile([export_all]).
-include("all_pb.hrl").
-include("mm_define.hrl").
-define( STRING(Str), (if is_list(Str) -> Str; is_binary(Str) -> binary_to_list(Str); true -> Str end)).
-define( UNPACK_REC(TypeList,Rec), unpack_record(TypeList, B, 2, Rec) ).
-define( UNPACKTOS_REC(TypeList,Rec), element(1, unpack_record(TypeList, B, 2, Rec))).
%%common proto 
unpack(p_line_info, B) ->?UNPACK_REC([string,string,int32,string], #p_line_info{});
unpack(p_role_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32], #p_role_info{});
unpack(p_bag_content, B) ->?UNPACK_REC([int32,{repeated,p_goods},int32,int32,int32,int32], #p_bag_content{});
unpack(p_skill_pos, B) ->?UNPACK_REC([int32,int32], #p_skill_pos{});
unpack(p_team_role, B) ->?UNPACK_REC([int32,string,int32,p_skin,int32,string,int32,int32,int32,int32,int32,int32,int32,bool,bool,bool,int32,int32,int32,int32,int32,int32,int32,int32], #p_team_role{});
unpack(p_team_nearby, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,string,bool], #p_team_nearby{});
unpack(p_friend_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,bool,string,string,int32,int32,int32], #p_friend_info{});
unpack(p_letter_info, B) ->?UNPACK_REC([int32,string,string,string,int32,int32,{repeated,p_goods},{repeated,p_goods},int32,string,int32], #p_letter_info{});
unpack(p_letter_goods, B) ->?UNPACK_REC([int32,int32], #p_letter_goods{});
unpack(p_letter_simple_info, B) ->?UNPACK_REC([int32,string,string,string,int32,int32,int32,bool,int32], #p_letter_simple_info{});
unpack(p_letter_send_condition, B) ->?UNPACK_REC([{repeated,string},{repeated,int32},{repeated,int32},int32,int32], #p_letter_send_condition{});
unpack(p_letter_delete, B) ->?UNPACK_REC([int32,bool,int32], #p_letter_delete{});
unpack(p_mount_info, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32], #p_mount_info{});
unpack(p_equip_endurance_info, B) ->?UNPACK_REC([int32,int32,int32], #p_equip_endurance_info{});
unpack(p_role_attr_change, B) ->?UNPACK_REC([int32,double], #p_role_attr_change{});
unpack(p_other_role_info, B) ->?UNPACK_REC([int32,string,int32,int32,string,int32,int32,int32,{repeated,p_goods},int32,int32,string,p_skin,double,p_fst_attr,p_fst_attr,p_sec_attr], #p_other_role_info{});
unpack(p_depot_bag, B) ->?UNPACK_REC([int32,{repeated,p_goods}], #p_depot_bag{});
unpack(p_shortcut, B) ->?UNPACK_REC([int32,int32,string], #p_shortcut{});
unpack(p_family_bonus, B) ->?UNPACK_REC([double,int32,string,int32,int32,int32,int32,int32,int32], #p_family_bonus{});
unpack(p_sys_config, B) ->?UNPACK_REC([bool,bool,bool,bool,bool,bool,bool,bool], #p_sys_config{});
unpack(p_activity_completion_new, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_activity_completion_new{});
unpack(p_activity_reward_list, B) ->?UNPACK_REC([{repeated,int32}], #p_activity_reward_list{});
unpack(p_time_gift_info, B) ->?UNPACK_REC([int32,{repeated,p_goods},int32], #p_time_gift_info{});
unpack(p_pet_collect, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_pet_collect{});
unpack(p_pet_eat_item, B) ->?UNPACK_REC([int32,int32], #p_pet_eat_item{});
unpack(p_bigpve_rank, B) ->?UNPACK_REC([int32,int32,string,int32,double], #p_bigpve_rank{});
unpack(p_role_goal, B) ->?UNPACK_REC([int32,{repeated,p_goal_condition},int32], #p_role_goal{});
unpack(p_goal_condition, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_goal_condition{});
unpack(p_compare_info, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,bool], #p_compare_info{});
unpack(p_team_mirror_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,double,bool], #p_team_mirror_info{});
unpack(p_super_prop, B) ->?UNPACK_REC([int32,int32], #p_super_prop{});
unpack(p_super_task, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,{repeated,p_super_prop}], #p_super_task{});
unpack(p_stone_eat, B) ->?UNPACK_REC([int32,int32], #p_stone_eat{});
unpack(p_shop_info, B) ->?UNPACK_REC([int32,string,{repeated,p_shop_info}], #p_shop_info{});
unpack(p_chat_role, B) ->?UNPACK_REC([int32,string,int32,string,int32,int32,string,{repeated,p_chat_title}], #p_chat_role{});
unpack(p_chat_title, B) ->?UNPACK_REC([int32,string,string], #p_chat_title{});
unpack(p_title, B) ->?UNPACK_REC([int32,string,int32,bool,int32,int32,bool,bool,string], #p_title{});
unpack(p_chat_channel_role_info, B) ->?UNPACK_REC([string,int32,int32,string,int32,int32,string,int32,string,bool], #p_chat_channel_role_info{});
unpack(p_channel_info, B) ->?UNPACK_REC([string,int32,string,int32,int32], #p_channel_info{});
unpack(p_actor_buf, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_actor_buf{});
unpack(p_skin, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,{repeated,int32},int32], #p_skin{});
unpack(p_fst_attr, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_fst_attr{});
unpack(p_sec_attr, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_sec_attr{});
unpack(p_role_base, B) ->?UNPACK_REC([int32,string,string,int32,int32,int32,int32,int32,int32,int32,string,string,string,int32,int32,int32,{repeated,p_actor_buf},int32,int32,bool,int32,int32,int32,p_fst_attr,p_fst_attr,p_sec_attr,double], #p_role_base{});
unpack(p_role_pos, B) ->?UNPACK_REC([int32,int32,p_pos,string,string], #p_role_pos{});
unpack(p_role_fight, B) ->?UNPACK_REC([int32,int32,int32], #p_role_fight{});
unpack(p_role_attr, B) ->?UNPACK_REC([int32,string,double,double,int32,{repeated,p_goods},p_skin,int32,int32,int32,int32,double,double,bool,int32,string,int32,string,bool,int32,int32,bool,bool,double,double,int32,{repeated,p_medal},int32,int32,int32,int32,int32,int32], #p_role_attr{});
unpack(p_medal, B) ->?UNPACK_REC([int32,int32], #p_medal{});
unpack(p_role_ext, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,int32,string,int32,int32,int32,string,int32,{repeated,int32}], #p_role_ext{});
unpack(p_role, B) ->?UNPACK_REC([p_role_base,p_role_fight,p_role_pos,p_role_attr,p_role_ext], #p_role{});
unpack(p_skill, B) ->?UNPACK_REC([int32,string,int32,int32,int32,{repeated,int32}], #p_skill{});
unpack(p_skill_precondition, B) ->?UNPACK_REC([int32,int32], #p_skill_precondition{});
unpack(p_role_skill, B) ->?UNPACK_REC([int32,int32], #p_role_skill{});
unpack(p_skill_level, B) ->?UNPACK_REC([int32,int32,int32,{repeated,int32},int32,int32,int32,int32,{repeated,int32},{repeated,int32}], #p_skill_level{});
unpack(p_skill_item_consume, B) ->?UNPACK_REC([int32,int32], #p_skill_item_consume{});
unpack(p_effect, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32], #p_effect{});
unpack(p_buf, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,bool,int32,int32], #p_buf{});
unpack(p_map_doll, B) ->?UNPACK_REC([int32,string,string,int32,int32,int32,int32,p_pos], #p_map_doll{});
unpack(p_pos, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_pos{});
unpack(p_map_tile, B) ->?UNPACK_REC([int32,int32], #p_map_tile{});
unpack(p_walk_path, B) ->?UNPACK_REC([int32,int32,{repeated,p_map_tile},int32,int32], #p_walk_path{});
unpack(p_map_role, B) ->?UNPACK_REC([int32,string,int32,string,int32,string,p_pos,p_walk_path,p_pos,int32,int32,int32,int32,p_skin,int32,int32,int32,int32,int32,bool,{repeated,p_actor_buf},string,int32,bool,int32,int32,int32,int32,int32,int32,double,bool,int32], #p_map_role{});
unpack(p_map_dropthing, B) ->?UNPACK_REC([int32,bool,bool,int32,{repeated,int32},p_pos,int32,int32,int32,int32,int32,p_drop_property], #p_map_dropthing{});
unpack(p_use_requirement, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32], #p_use_requirement{});
unpack(p_property_add, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_property_add{});
unpack(p_equip_base_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,p_use_requirement,int32,int32,int32,p_attr,int32], #p_equip_base_info{});
unpack(p_item_effect, B) ->?UNPACK_REC([int32,string], #p_item_effect{});
unpack(p_item_base_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,int32,int32,p_use_requirement,{repeated,p_item_effect},int32,int32,int32,int32], #p_item_base_info{});
unpack(p_stone_base_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,p_attr,int32,int32,int32,int32,int32], #p_stone_base_info{});
unpack(p_attr, B) ->?UNPACK_REC([int32,int32,int32], #p_attr{});
unpack(p_super_equip, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_super_equip{});
unpack(p_reinforce, B) ->?UNPACK_REC([int32,int32,int32], #p_reinforce{});
unpack(p_super_suit, B) ->?UNPACK_REC([int32,bool,{repeated,p_attr}], #p_super_suit{});
unpack(p_goods, B) ->?UNPACK_REC([int32,int32,int32,string,int32,int32,int32,int32,bool,int32,int32,int32,string,int32,int32,p_reinforce,int32,p_attr,{repeated,p_attr},{repeated,p_attr},{repeated,p_attr},p_super_equip,{repeated,p_goods},{repeated,p_super_suit},int32,int32,int32], #p_goods{});
unpack(p_equip_bind_attr, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_equip_bind_attr{});
unpack(p_equip_whole_attr, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32], #p_equip_whole_attr{});
unpack(p_refresh_info, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_refresh_info{});
unpack(p_monster_skill, B) ->?UNPACK_REC([int32,int32], #p_monster_skill{});
unpack(p_drop_property, B) ->?UNPACK_REC([bool,int32,int32,int32,int32], #p_drop_property{});
unpack(p_drop_colour_mode, B) ->?UNPACK_REC([int32,int32], #p_drop_colour_mode{});
unpack(p_drop_quality_mode, B) ->?UNPACK_REC([int32,int32], #p_drop_quality_mode{});
unpack(p_drop_hole_mode, B) ->?UNPACK_REC([int32,int32], #p_drop_hole_mode{});
unpack(p_drop_mode, B) ->?UNPACK_REC([int32,int32,{repeated,p_drop_colour_mode},{repeated,p_drop_colour_mode},{repeated,p_drop_quality_mode},{repeated,p_drop_quality_mode},{repeated,p_drop_hole_mode},{repeated,p_drop_hole_mode},int32], #p_drop_mode{});
unpack(p_single_drop, B) ->?UNPACK_REC([int32,int32,int32], #p_single_drop{});
unpack(p_drop_info, B) ->?UNPACK_REC([{repeated,p_single_drop},int32,int32,p_drop_mode], #p_drop_info{});
unpack(p_monster_drop_info, B) ->?UNPACK_REC([int32,{repeated,p_drop_info}], #p_monster_drop_info{});
unpack(p_monster_base_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,p_sec_attr,int32,int32], #p_monster_base_info{});
unpack(p_enemy, B) ->?UNPACK_REC([int32,int32,int32,p_pos,int32], #p_enemy{});
unpack(p_monster, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,p_pos,p_pos,{repeated,p_enemy},{repeated,p_enemy},{repeated,p_enemy},int32,int32,{repeated,p_actor_buf},string,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_monster{});
unpack(p_map_monster, B) ->?UNPACK_REC([int32,int32,int32,int32,double,double,p_pos,double,double,int32,p_walk_path,{repeated,p_actor_buf},string], #p_map_monster{});
unpack(p_unit_base_info, B) ->?UNPACK_REC([int32,int32,int32,string,int32,int32,int32,int32,int32,int32,{repeated,int32}], #p_unit_base_info{});
unpack(p_map_unit, B) ->?UNPACK_REC([int32,int32,int32,double,double,p_pos,int32,int32,{repeated,int32}], #p_map_unit{});
unpack(p_boss_ai_skill, B) ->?UNPACK_REC([int32,int32,int32,int32,bool], #p_boss_ai_skill{});
unpack(p_mission_condition, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,bool,bool], #p_mission_condition{});
unpack(p_family_summary, B) ->?UNPACK_REC([int32,string,int32,string,int32,string,int32,int32,int32,int32,int32,int32,int32,string,int32,int32,int32], #p_family_summary{});
unpack(p_family_invite_info, B) ->?UNPACK_REC([int32,int32,string,int32,string], #p_family_invite_info{});
unpack(p_family_info_change, B) ->?UNPACK_REC([int32,int32], #p_family_info_change{});
unpack(p_family_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,string,int32,string,{repeated,p_family_second_owner},int32,int32,int32,{repeated,p_family_request},{repeated,p_family_invite},string,string,{repeated,p_family_member_info},bool,bool,bool,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,{repeated,p_family_elder}], #p_family_info{});
unpack(p_family_request_info, B) ->?UNPACK_REC([int32,int32], #p_family_request_info{});
unpack(p_family_war_score, B) ->?UNPACK_REC([int32,string,int32], #p_family_war_score{});
unpack(p_family_boss, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_family_boss{});
unpack(p_family_member_info, B) ->?UNPACK_REC([int32,string,string,string,int32,int32,int32,bool,int32,int32,int32,int32], #p_family_member_info{});
unpack(p_family_second_owner, B) ->?UNPACK_REC([int32,string], #p_family_second_owner{});
unpack(p_family_elder, B) ->?UNPACK_REC([int32,string], #p_family_elder{});
unpack(p_family_request, B) ->?UNPACK_REC([int32,string,string,int32,int32,int32], #p_family_request{});
unpack(p_family_invite, B) ->?UNPACK_REC([int32,string,string,int32], #p_family_invite{});
unpack(p_rank_row, B) ->?UNPACK_REC([int32,int32,{repeated,string},{repeated,int32}], #p_rank_row{});
unpack(p_role_family_donate_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32], #p_role_family_donate_info{});
unpack(p_rank_element, B) ->?UNPACK_REC([int32,int32,int32], #p_rank_element{});
unpack(p_ranking, B) ->?UNPACK_REC([int32,int32,int32,string,string,int32,{repeated,p_rank_element},int32,int32,p_title], #p_ranking{});
unpack(p_role_level_rank, B) ->?UNPACK_REC([int32,string,int32,string,int32,int32,string,double,int32,double], #p_role_level_rank{});
unpack(p_role_danyao_rank, B) ->?UNPACK_REC([int32,string,int32,int32,string,double], #p_role_danyao_rank{});
unpack(p_role_xfire_rank, B) ->?UNPACK_REC([int32,string,int32,int32,string,double], #p_role_xfire_rank{});
unpack(p_role_pkpoint_rank, B) ->?UNPACK_REC([int32,string,int32,string,int32,string,int32], #p_role_pkpoint_rank{});
unpack(p_family_active_rank, B) ->?UNPACK_REC([int32,string,string,int32,int32,int32,int32,int32], #p_family_active_rank{});
unpack(p_family_gongxun_rank, B) ->?UNPACK_REC([int32,string,string,int32,int32,int32,int32,int32,int32,int32], #p_family_gongxun_rank{});
unpack(p_family_gongxun_persistent_rank, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_family_gongxun_persistent_rank{});
unpack(p_equip_rank, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_equip_rank{});
unpack(p_role_gongxun_rank, B) ->?UNPACK_REC([int32,string,int32,string,int32,int32,string,double,int32], #p_role_gongxun_rank{});
unpack(p_role_all_rank, B) ->?UNPACK_REC([int32,string,string,int32,string], #p_role_all_rank{});
unpack(p_role_give_flowers_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_give_flowers_rank{});
unpack(p_role_give_flowers_today_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_give_flowers_today_rank{});
unpack(p_role_give_flowers_yesterday_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_give_flowers_yesterday_rank{});
unpack(p_role_give_flowers_last_week_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_give_flowers_last_week_rank{});
unpack(p_role_give_flowers_this_week_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_give_flowers_this_week_rank{});
unpack(p_role_rece_flowers_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_rece_flowers_rank{});
unpack(p_role_rece_flowers_today_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_rece_flowers_today_rank{});
unpack(p_role_rece_flowers_yesterday_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_rece_flowers_yesterday_rank{});
unpack(p_role_rece_flowers_last_week_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_rece_flowers_last_week_rank{});
unpack(p_role_rece_flowers_this_week_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,string,int32,string], #p_role_rece_flowers_this_week_rank{});
unpack(p_role_pet_rank, B) ->?UNPACK_REC([int32,string,int32,int32,string,int32,int32,int32,int32,int32,string,string], #p_role_pet_rank{});
unpack(p_mine_battle_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,int32], #p_mine_battle_rank{});
unpack(p_jingjie_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32], #p_jingjie_rank{});
unpack(p_jingjie_rank_yesterday, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,int32], #p_jingjie_rank_yesterday{});
unpack(p_role_fight_power_rank, B) ->?UNPACK_REC([int32,int32,string,int32,double,int32,string,int32,string,int32], #p_role_fight_power_rank{});
unpack(p_role_fight_power_rank_yesterday, B) ->?UNPACK_REC([int32,int32,string,int32,double,int32,string,int32,int32], #p_role_fight_power_rank_yesterday{});
unpack(p_recommend_member_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,int32,int32], #p_recommend_member_info{});
unpack(p_map_collect, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,p_pos,{repeated,p_collect_role}], #p_map_collect{});
unpack(p_collect_role, B) ->?UNPACK_REC([int32,int32,int32], #p_collect_role{});
unpack(p_collect_point, B) ->?UNPACK_REC([int32,int32,int32,p_pos,int32,int32,int32,p_collect_refresh,{repeated,int32},int32,int32,{repeated,p_collect}], #p_collect_point{});
unpack(p_collect_point_base_info, B) ->?UNPACK_REC([int32,int32,int32,p_pos,int32,p_collect_refresh,int32,{repeated,p_collect}], #p_collect_point_base_info{});
unpack(p_collect, B) ->?UNPACK_REC([int32,int32], #p_collect{});
unpack(p_collect_refresh, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_collect_refresh{});
unpack(p_map_trap, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,int32,int32,{repeated,int32},{repeated,int32},int32,p_pos,int32,int32], #p_map_trap{});
unpack(p_map_ybc, B) ->?UNPACK_REC([int32,int32,int32,int32,p_pos,int32,string,int32,int32,int32,int32,int32,{repeated,p_actor_buf},int32,int32,bool,int32,int32,int32,int32,int32], #p_map_ybc{});
unpack(p_server_npc, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,int32,int32,int32,p_pos,{repeated,p_enemy},{repeated,p_enemy},{repeated,p_enemy},int32,int32,{repeated,p_actor_buf},int32,bool,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_server_npc{});
unpack(p_map_server_npc, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,double,double,int32,int32,p_pos,int32,p_walk_path,{repeated,p_actor_buf},bool,int32], #p_map_server_npc{});
unpack(p_server_npc_base_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,bool,int32,int32,int32,p_refresh_info,{repeated,p_monster_skill},int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_server_npc_base_info{});
unpack(p_activity_info, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32], #p_activity_info{});
unpack(p_activity_rank, B) ->?UNPACK_REC([int32,string,int32,int32,double,int32], #p_activity_rank{});
unpack(p_actpoint_info, B) ->?UNPACK_REC([int32,int32,int32], #p_actpoint_info{});
unpack(p_pet_skill, B) ->?UNPACK_REC([int32,int32,int32], #p_pet_skill{});
unpack(p_pet, B) ->?UNPACK_REC([int32,int32,int32,int32,string,int32,int32,string,int32,int32,int32,{repeated,p_actor_buf},{repeated,p_goods},int32,int32,p_fst_attr,p_sec_attr,double], #p_pet{});
unpack(p_map_pet, B) ->?UNPACK_REC([int32,int32,string,int32,int32,p_pos,int32,int32,int32,{repeated,p_actor_buf},int32,int32,bool], #p_map_pet{});
unpack(p_role_pet_bag, B) ->?UNPACK_REC([int32,int32,{repeated,p_pet_id_name}], #p_role_pet_bag{});
unpack(p_pet_id_name, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32], #p_pet_id_name{});
unpack(p_present_info, B) ->?UNPACK_REC([int32,{repeated,p_reward_prop}], #p_present_info{});
unpack(p_conlogin_reward, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,bool,int32,int32,int32,bool,int32,{repeated,int32}], #p_conlogin_reward{});
unpack(p_fml_buff, B) ->?UNPACK_REC([int32,int32], #p_fml_buff{});
unpack(p_role_vip, B) ->?UNPACK_REC([int32,int32,int32,int32,bool,bool,bool,int32,int32,int32], #p_role_vip{});
unpack(p_vip_list_info, B) ->?UNPACK_REC([int32,string,int32,int32,int32,string,int32,bool], #p_vip_list_info{});
unpack(p_fmldepot_log, B) ->?UNPACK_REC([int32,string,int32,int32,int32], #p_fmldepot_log{});
unpack(p_fmldepot_bag, B) ->?UNPACK_REC([int32,{repeated,p_goods}], #p_fmldepot_bag{});
unpack(p_fmlshop_item, B) ->?UNPACK_REC([int32,int32,int32], #p_fmlshop_item{});
unpack(p_equip_mount_renewal, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_equip_mount_renewal{});
unpack(p_scene_war_fb_link, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,bool], #p_scene_war_fb_link{});
unpack(p_gift_goods, B) ->?UNPACK_REC([int32,int32,int32,bool,int32,int32,int32,int32,int32], #p_gift_goods{});
unpack(p_family_task, B) ->?UNPACK_REC([int32,int32], #p_family_task{});
unpack(p_treasbox_log, B) ->?UNPACK_REC([int32,int32,string,int32,int32,{repeated,p_reward_prop}], #p_treasbox_log{});
unpack(p_xfire_param, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32], #p_xfire_param{});
unpack(p_xfire_rank, B) ->?UNPACK_REC([int32,int32,int32,string,int32,int32,int32,int32,int32,int32], #p_xfire_rank{});
unpack(p_boss_group, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32], #p_boss_group{});
unpack(p_reward_prop, B) ->?UNPACK_REC([int32,int32,bool], #p_reward_prop{});
unpack(p_equip_item, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_equip_item{});
unpack(p_nationbattle_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,int32,int32], #p_nationbattle_rank{});
unpack(p_familyboss_person_rank, B) ->?UNPACK_REC([int32,int32,string,int32,int32], #p_familyboss_person_rank{});
unpack(p_pve_fb_buff_info, B) ->?UNPACK_REC([int32,int32,int32], #p_pve_fb_buff_info{});
unpack(p_jingjie_attr_change, B) ->?UNPACK_REC([int32,double], #p_jingjie_attr_change{});
unpack(p_daily_reward, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32], #p_daily_reward{});
unpack(p_daily_reward_item, B) ->?UNPACK_REC([int32,int32,int32,bool], #p_daily_reward_item{});
unpack(p_faction_strength, B) ->?UNPACK_REC([int32,int32], #p_faction_strength{});
unpack(p_activity_pay_gift_info, B) ->?UNPACK_REC([int32,int32,bool,bool], #p_activity_pay_gift_info{});
unpack(p_use_item, B) ->?UNPACK_REC([int32,int32], #p_use_item{});
unpack(p_mystery_shop_item, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,bool,bool,{repeated,p_goods}], #p_mystery_shop_item{});
unpack(p_mystery_shop_reward, B) ->?UNPACK_REC([int32,int32], #p_mystery_shop_reward{});
unpack(p_examine_fb_panel_info, B) ->?UNPACK_REC([{repeated,int32},{repeated,p_examine_fb_barrier},int32], #p_examine_fb_panel_info{});
unpack(p_reset_gold, B) ->?UNPACK_REC([int32,int32], #p_reset_gold{});
unpack(p_chapter_status, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_chapter_status{});
unpack(p_examine_fb_barrier, B) ->?UNPACK_REC([int32,int32,int32,{repeated,int32}], #p_examine_fb_barrier{});
unpack(p_bet_role, B) ->?UNPACK_REC([int32,int32,string,int32], #p_bet_role{});
unpack(p_deposit_log, B) ->?UNPACK_REC([{repeated,p_bet_role},int32,int32], #p_deposit_log{});
unpack(p_deposit_look, B) ->?UNPACK_REC([string,int32,int32], #p_deposit_look{});
unpack(p_rnkm_role, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32], #p_rnkm_role{});
unpack(p_grab_role, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_grab_role{});
unpack(p_rnkm_mirror, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,int32,int32,int32,bool], #p_rnkm_mirror{});
unpack(p_family_pray_rec, B) ->?UNPACK_REC([int32,string,int32,int32], #p_family_pray_rec{});
unpack(p_tili_info, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32], #p_tili_info{});
unpack(p_sms, B) ->?UNPACK_REC([int32,string], #p_sms{});
unpack(p_k_v, B) ->?UNPACK_REC([int32,int32], #p_k_v{});
unpack(p_activity_tree, B) ->?UNPACK_REC([int32,int32,int32,int32,{repeated,int32}], #p_activity_tree{});
unpack(p_gift_reward, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,bool,int32,int32], #p_gift_reward{});
unpack(p_activity_reward_info, B) ->?UNPACK_REC([int32,{repeated,p_reward_prop}], #p_activity_reward_info{});
unpack(p_active_attr, B) ->?UNPACK_REC([int32,{repeated,int32}], #p_active_attr{});
unpack(p_activity_completion, B) ->?UNPACK_REC([int32,int32,{repeated,int32},{repeated,p_k_v}], #p_activity_completion{});
unpack(p_role_achievement, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_role_achievement{});
unpack(p_role_fund, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_role_fund{});
unpack(p_time_activity, B) ->?UNPACK_REC([int32,int32,int32,int32,{repeated,p_activity_status},bool], #p_time_activity{});
unpack(p_activity_status, B) ->?UNPACK_REC([int32,int32,int32], #p_activity_status{});
unpack(p_org_activity, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_org_activity{});
unpack(p_role_activity_daily_info, B) ->?UNPACK_REC([int32,int32], #p_role_activity_daily_info{});
unpack(p_reward_daily_info, B) ->?UNPACK_REC([int32,bool,int32,int32,int32,int32], #p_reward_daily_info{});
unpack(p_room_info, B) ->?UNPACK_REC([int32,int32,{repeated,p_room_member}], #p_room_info{});
unpack(p_room_member, B) ->?UNPACK_REC([int32,string,int32,int32,int32], #p_room_member{});
unpack(p_func_open_info, B) ->?UNPACK_REC([int32,bool], #p_func_open_info{});
unpack(p_reward_fb_info, B) ->?UNPACK_REC([int32,bool], #p_reward_fb_info{});
unpack(p_open_activity, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_open_activity{});
unpack(p_open_activity_rank, B) ->?UNPACK_REC([int32,int32,string,double,int32,int32], #p_open_activity_rank{});
unpack(p_daily_activity, B) ->?UNPACK_REC([int32,int32,int32], #p_daily_activity{});
unpack(p_daily_counter, B) ->?UNPACK_REC([int32,int32], #p_daily_counter{});
unpack(p_daily_activity_guide, B) ->?UNPACK_REC([int32,int32,int32], #p_daily_activity_guide{});
unpack(p_daily_benefit_info, B) ->?UNPACK_REC([int32,int32,int32], #p_daily_benefit_info{});
unpack(p_daily_benefit_expback, B) ->?UNPACK_REC([int32,int32,int32], #p_daily_benefit_expback{});
unpack(p_family_boss_call, B) ->?UNPACK_REC([string,int32,int32,int32,p_family_boss_reward,p_family_boss_reward,p_family_boss_reward], #p_family_boss_call{});
unpack(p_family_boss_reward, B) ->?UNPACK_REC([double,double,int32,int32,p_reward_prop], #p_family_boss_reward{});
unpack(p_shop_sale_goods, B) ->?UNPACK_REC([int32,int32,int32,int32], #p_shop_sale_goods{});
unpack(p_shop_goods_info, B) ->?UNPACK_REC([int32,int32,int32,p_shop_price,p_attr], #p_shop_goods_info{});
unpack(p_shop_price, B) ->?UNPACK_REC([int32,int32,int32], #p_shop_price{});
unpack(p_secret_fb, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_secret_fb{});
unpack(p_pet_employ, B) ->?UNPACK_REC([int32,int32], #p_pet_employ{});
unpack(p_attack_result, B) ->?UNPACK_REC([int32,int32,int32,int32,{repeated,int32}], #p_attack_result{});
unpack(p_prop, B) ->?UNPACK_REC([int32,int32], #p_prop{});
unpack(p_lotto_his, B) ->?UNPACK_REC([string,int32], #p_lotto_his{});
unpack(p_danyao_hole, B) ->?UNPACK_REC([int32,int32,{repeated,p_prop}], #p_danyao_hole{});
unpack(p_caishen_coin, B) ->?UNPACK_REC([int32,int32,int32,int32,int32], #p_caishen_coin{});
unpack(p_pay_item, B) ->?UNPACK_REC([int32,double,int32,int32,int32], #p_pay_item{});
unpack(p_round_pvp_history, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,int32], #p_round_pvp_history{});
unpack(p_round_pvp_rank, B) ->?UNPACK_REC([int32,int32,string,int32], #p_round_pvp_rank{});
unpack(p_monster_war_rank, B) ->?UNPACK_REC([int32,int32,string,int32], #p_monster_war_rank{});
unpack(p_jingjie_condition, B) ->?UNPACK_REC([int32,string,int32], #p_jingjie_condition{});
unpack(p_gengu_info, B) ->?UNPACK_REC([int32,int32], #p_gengu_info{});
unpack(p_qq_token, B) ->?UNPACK_REC([string,string,string,string], #p_qq_token{});
unpack(p_holiday_gold_act_history, B) ->?UNPACK_REC([string,int32,int32], #p_holiday_gold_act_history{});
unpack(p_actor, B) ->?UNPACK_REC([int32,int32], #p_actor{});
unpack(p_fighter, B) ->?UNPACK_REC([int32,int32,string,int32,int32,int32,int32,int32,int32,int32,int32,int32,{repeated,p_role_skill},int32], #p_fighter{});
unpack(p_hanging_round, B) ->?UNPACK_REC([p_battle,int32,{repeated,p_fighter},{repeated,p_fighter},{repeated,p_hanging_part},int32,int32,int32,{repeated,int32}], #p_hanging_round{});
unpack(p_hanging_buff, B) ->?UNPACK_REC([int32,int32,int32], #p_hanging_buff{});
unpack(p_hanging_offline_report, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,{repeated,p_reward_prop},{repeated,p_reward_color},{repeated,p_reward_color}], #p_hanging_offline_report{});
unpack(p_hanging_part, B) ->?UNPACK_REC([int32,{repeated,p_hanging_step},{repeated,p_hanging_step}], #p_hanging_part{});
unpack(p_hanging_step, B) ->?UNPACK_REC([int32,int32,{repeated,p_skill_result}], #p_hanging_step{});
unpack(p_skill_result, B) ->?UNPACK_REC([int32,int32,{repeated,p_attack_result},{repeated,p_buff_result},int32,{repeated,p_actor}], #p_skill_result{});
unpack(p_reward_color, B) ->?UNPACK_REC([int32,int32], #p_reward_color{});
unpack(p_battle, B) ->?UNPACK_REC([int32,int32,int32], #p_battle{});
unpack(p_fmlmatch_family_rank, B) ->?UNPACK_REC([int32,int32,string,int32], #p_fmlmatch_family_rank{});
unpack(p_fmlmatch_role_rank, B) ->?UNPACK_REC([int32,int32,string,double,int32], #p_fmlmatch_role_rank{});
unpack(p_fmlmatch_role, B) ->?UNPACK_REC([int32,string,int32,double,int32,string,int32], #p_fmlmatch_role{});
unpack(p_fmlmatch_fight, B) ->?UNPACK_REC([p_fmlmatch_role,p_fmlmatch_role,int32,int32], #p_fmlmatch_fight{});
unpack(p_role_snapshot, B) ->?UNPACK_REC([int32,string,int32,int32,int32], #p_role_snapshot{});
unpack(p_single_fb, B) ->?UNPACK_REC([int32,int32,int32,int32,bool,int32], #p_single_fb{});
unpack(p_family_fb_rank, B) ->?UNPACK_REC([int32,int32,int32,string,int32,int32], #p_family_fb_rank{});
unpack(p_buff_result, B) ->?UNPACK_REC([int32,int32,{repeated,int32}], #p_buff_result{});
unpack(p_main_fb_info, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_main_fb_info{});
unpack(p_shenqi_build, B) ->?UNPACK_REC([int32,int32,int32,{repeated,p_attr}], #p_shenqi_build{});
unpack(p_moveinfo, B) ->?UNPACK_REC([p_pos,p_pos,int32,int32,double,int32], #p_moveinfo{});
unpack(p_mission_listener, B) ->?UNPACK_REC([int32,int32,{repeated,int32},int32,int32], #p_mission_listener{});
unpack(p_mission_info, B) ->?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,{repeated,p_mission_listener},{repeated,int32},{repeated,int32},{repeated,int32},{repeated,int32}], #p_mission_info{});
unpack(p_mission_reward_data, B) ->?UNPACK_REC([int32,int32,int32,int32,{repeated,p_mission_prop},int32], #p_mission_reward_data{});
unpack(p_mission_prop, B) ->?UNPACK_REC([int32,int32,int32,bool,int32], #p_mission_prop{});
unpack(p_mission_auto, B) ->?UNPACK_REC([int32,string,int32,int32,int32,int32,int32,int32], #p_mission_auto{});
unpack(b_server_auth_tos, B) ->?UNPACK_REC([string,int32,string], #b_server_auth_tos{});
unpack(b_server_auth_toc, B) ->?UNPACK_REC([bool,string,string,int32], #b_server_auth_toc{});
unpack(b_server_msg_toc, B) ->?UNPACK_REC([string], #b_server_msg_toc{});
unpack(b_server_unique_toc, B) ->?UNPACK_REC([int32], #b_server_unique_toc{});
unpack(b_consume_gold_tos, B) ->?UNPACK_REC([int32,string,string,int32,int32,int32,int32,int32,string,int32,int32], #b_consume_gold_tos{});
unpack(b_pay_log_tos, B) ->?UNPACK_REC([string,string,int32,string,double,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #b_pay_log_tos{});
unpack(adm_gm_complaint, B) ->?UNPACK_REC([string,int32,string,int32,int32,int32,int32,string,string], #adm_gm_complaint{});
unpack(adm_gm_evaluate, B) ->?UNPACK_REC([int32,int32,int32], #adm_gm_evaluate{});
unpack(adm_gm_notify_reply, B) ->?UNPACK_REC([int32,bool,string], #adm_gm_notify_reply{});
unpack(RecordTag, _Bin) -> throw({illegal_record_tag, RecordTag}).
%%tos proto
unpack_tos(?ROLE_AUTH, B) ->?UNPACKTOS_REC([string,string,int32,string,string], #m_role_auth_tos{});
unpack_tos(?ROLE_CHOOSE, B) ->?UNPACKTOS_REC([int32], #m_role_choose_tos{});
unpack_tos(?ROLE_ADD, B) ->?UNPACKTOS_REC([string,int32,int32,int32,int32,int32,int32], #m_role_add_tos{});
unpack_tos(?ROLE_GEN_NAME, B) ->?UNPACKTOS_REC([int32], #m_role_gen_name_tos{});
unpack_tos(?MAP_ENTER, B) ->?UNPACKTOS_REC([int32], #m_map_enter_tos{});
unpack_tos(?MAP_UPDATE_ACTOR_MAPINFO, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_map_update_actor_mapinfo_tos{});
unpack_tos(?MAP_TRANSFER, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_map_transfer_tos{});
unpack_tos(?MAP_GATE, B) ->?UNPACKTOS_REC([int32], #m_map_gate_tos{});
unpack_tos(?MOVE_WALK_PATH, B) ->?UNPACKTOS_REC([p_walk_path], #m_move_walk_path_tos{});
unpack_tos(?MOVE_INFO, B) ->?UNPACKTOS_REC([p_moveinfo], #m_move_info_tos{});
unpack_tos(?MOVE_WALK, B) ->?UNPACKTOS_REC([p_pos], #m_move_walk_tos{});
unpack_tos(?MAP_DROPTHING_PICK, B) ->?UNPACKTOS_REC([int32,bool], #m_map_dropthing_pick_tos{});
unpack_tos(?MAP_CHANGE_MAP, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_map_change_map_tos{});
unpack_tos(?FIGHT_BEFORE_ATTACK, B) ->?UNPACKTOS_REC([int32,int32,int32,{repeated,int32}], #m_fight_before_attack_tos{});
unpack_tos(?FIGHT_ATTACK, B) ->?UNPACKTOS_REC([p_map_tile,int32,{repeated,int32},int32,int32], #m_fight_attack_tos{});
unpack_tos(?FIGHT_BEGIN, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_fight_begin_tos{});
unpack_tos(?TEAM_INVITE, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_team_invite_tos{});
unpack_tos(?TEAM_ACCEPT, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_team_accept_tos{});
unpack_tos(?TEAM_REFUSE, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_team_refuse_tos{});
unpack_tos(?TEAM_LEAVE, B) ->?UNPACKTOS_REC([int32], #m_team_leave_tos{});
unpack_tos(?TEAM_KICK, B) ->?UNPACKTOS_REC([int32], #m_team_kick_tos{});
unpack_tos(?TEAM_CHANGE_LEADER, B) ->?UNPACKTOS_REC([int32,int32,string], #m_team_change_leader_tos{});
unpack_tos(?TEAM_DISBAND, B) ->?UNPACKTOS_REC([int32], #m_team_disband_tos{});
unpack_tos(?TEAM_PICK, B) ->?UNPACKTOS_REC([int32], #m_team_pick_tos{});
unpack_tos(?TEAM_MEMBER_INVITE, B) ->?UNPACKTOS_REC([int32,int32,string,int32,string], #m_team_member_invite_tos{});
unpack_tos(?TEAM_MEMBER_RECOMMEND, B) ->?UNPACKTOS_REC([], #m_team_member_recommend_tos{});
unpack_tos(?TEAM_APPLY, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_team_apply_tos{});
unpack_tos(?TEAM_QUERY, B) ->?UNPACKTOS_REC([int32], #m_team_query_tos{});
unpack_tos(?TEAM_CREATE, B) ->?UNPACKTOS_REC([int32], #m_team_create_tos{});
unpack_tos(?TEAM_FB_CALL, B) ->?UNPACKTOS_REC([int32,int32,string], #m_team_fb_call_tos{});
unpack_tos(?TEAM_FB_TRANSFER, B) ->?UNPACKTOS_REC([int32,int32], #m_team_fb_transfer_tos{});
unpack_tos(?FRIEND_REQUEST, B) ->?UNPACKTOS_REC([string], #m_friend_request_tos{});
unpack_tos(?FRIEND_ACCEPT, B) ->?UNPACKTOS_REC([string], #m_friend_accept_tos{});
unpack_tos(?FRIEND_ACCEPT_OR_REFUSE, B) ->?UNPACKTOS_REC([int32], #m_friend_accept_or_refuse_tos{});
unpack_tos(?FRIEND_REFUSE, B) ->?UNPACKTOS_REC([string], #m_friend_refuse_tos{});
unpack_tos(?FRIEND_DELETE, B) ->?UNPACKTOS_REC([int32], #m_friend_delete_tos{});
unpack_tos(?FRIEND_BLACK, B) ->?UNPACKTOS_REC([string], #m_friend_black_tos{});
unpack_tos(?FRIEND_LIST, B) ->?UNPACKTOS_REC([], #m_friend_list_tos{});
unpack_tos(?FRIEND_BLACK_DELETE, B) ->?UNPACKTOS_REC([int32], #m_friend_black_delete_tos{});
unpack_tos(?FRIEND_SEARCH, B) ->?UNPACKTOS_REC([{repeated,string}], #m_friend_search_tos{});
unpack_tos(?FRIEND_AROUND_ROLE, B) ->?UNPACKTOS_REC([], #m_friend_around_role_tos{});
unpack_tos(?FRIEND_RECENT_CONTACTS, B) ->?UNPACKTOS_REC([], #m_friend_recent_contacts_tos{});
unpack_tos(?FRIEND_REQUEST_LIST, B) ->?UNPACKTOS_REC([], #m_friend_request_list_tos{});
unpack_tos(?FRIEND_INFO, B) ->?UNPACKTOS_REC([int32], #m_friend_info_tos{});
unpack_tos(?FRIEND_MODIFY, B) ->?UNPACKTOS_REC([p_role_ext], #m_friend_modify_tos{});
unpack_tos(?FRIEND_GET_INFO, B) ->?UNPACKTOS_REC([int32], #m_friend_get_info_tos{});
unpack_tos(?FRIEND_RECOMMEND, B) ->?UNPACKTOS_REC([int32], #m_friend_recommend_tos{});
unpack_tos(?FRIEND_AUTO_RECOMMEND, B) ->?UNPACKTOS_REC([], #m_friend_auto_recommend_tos{});
unpack_tos(?FRIEND_QUICK_REQUEST, B) ->?UNPACKTOS_REC([{repeated,int32}], #m_friend_quick_request_tos{});
unpack_tos(?FRIEND_CONGRATULATION, B) ->?UNPACKTOS_REC([int32,string], #m_friend_congratulation_tos{});
unpack_tos(?FRIEND_ADVERTISE, B) ->?UNPACKTOS_REC([], #m_friend_advertise_tos{});
unpack_tos(?LETTER_GET, B) ->?UNPACKTOS_REC([int32], #m_letter_get_tos{});
unpack_tos(?LETTER_OPEN, B) ->?UNPACKTOS_REC([int32,int32,bool], #m_letter_open_tos{});
unpack_tos(?LETTER_P2P_SEND, B) ->?UNPACKTOS_REC([string,string,{repeated,p_letter_goods},string], #m_letter_p2p_send_tos{});
unpack_tos(?LETTER_FAMILY_SEND, B) ->?UNPACKTOS_REC([string,int32], #m_letter_family_send_tos{});
unpack_tos(?LETTER_DELETE, B) ->?UNPACKTOS_REC([{repeated,p_letter_delete}], #m_letter_delete_tos{});
unpack_tos(?LETTER_ACCEPT_GOODS, B) ->?UNPACKTOS_REC([int32,int32], #m_letter_accept_goods_tos{});
unpack_tos(?MOUNT_LIST, B) ->?UNPACKTOS_REC([], #m_mount_list_tos{});
unpack_tos(?MOUNT_UP, B) ->?UNPACKTOS_REC([int32], #m_mount_up_tos{});
unpack_tos(?MOUNT_DOWN, B) ->?UNPACKTOS_REC([], #m_mount_down_tos{});
unpack_tos(?MOUNT_UPGRADE, B) ->?UNPACKTOS_REC([int32,bool], #m_mount_upgrade_tos{});
unpack_tos(?MOUNT_AUTOUPGRADE, B) ->?UNPACKTOS_REC([int32,int32], #m_mount_autoupgrade_tos{});
unpack_tos(?MOUNT_CHANGEUP, B) ->?UNPACKTOS_REC([int32], #m_mount_changeup_tos{});
unpack_tos(?MOUNT_CHANGEDOWN, B) ->?UNPACKTOS_REC([], #m_mount_changedown_tos{});
unpack_tos(?MOUNT_FORCEUP, B) ->?UNPACKTOS_REC([], #m_mount_forceup_tos{});
unpack_tos(?MOUNT_FORCEDOWN, B) ->?UNPACKTOS_REC([], #m_mount_forcedown_tos{});
unpack_tos(?MOUNT_EVOLVE, B) ->?UNPACKTOS_REC([int32], #m_mount_evolve_tos{});
unpack_tos(?FASHION_LIST, B) ->?UNPACKTOS_REC([], #m_fashion_list_tos{});
unpack_tos(?FASHION_UP, B) ->?UNPACKTOS_REC([int32], #m_fashion_up_tos{});
unpack_tos(?FASHION_DOWN, B) ->?UNPACKTOS_REC([], #m_fashion_down_tos{});
unpack_tos(?FASHION_UPGRADE, B) ->?UNPACKTOS_REC([int32,bool], #m_fashion_upgrade_tos{});
unpack_tos(?FASHION_AUTOUPGRADE, B) ->?UNPACKTOS_REC([int32,int32], #m_fashion_autoupgrade_tos{});
unpack_tos(?EQUIP_MOUNTUP, B) ->?UNPACKTOS_REC([int32], #m_equip_mountup_tos{});
unpack_tos(?EQUIP_MOUNTDOWN, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_equip_mountdown_tos{});
unpack_tos(?EQUIP_MOUNT_CHANGECOLOR, B) ->?UNPACKTOS_REC([int32,bool], #m_equip_mount_changecolor_tos{});
unpack_tos(?EQUIP_LOAD, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_equip_load_tos{});
unpack_tos(?EQUIP_UNLOAD, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_equip_unload_tos{});
unpack_tos(?EQUIP_REINFORCE, B) ->?UNPACKTOS_REC([int32,int32,bool,int32], #m_equip_reinforce_tos{});
unpack_tos(?EQUIP_INHERIT, B) ->?UNPACKTOS_REC([int32,int32], #m_equip_inherit_tos{});
unpack_tos(?ITEM_USE, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_item_use_tos{});
unpack_tos(?ITEM_USE_SPECIAL, B) ->?UNPACKTOS_REC([int32], #m_item_use_special_tos{});
unpack_tos(?ITEM_TRACE, B) ->?UNPACKTOS_REC([string,int32], #m_item_trace_tos{});
unpack_tos(?ITEM_EXTEND_BAG_ROW, B) ->?UNPACKTOS_REC([int32], #m_item_extend_bag_row_tos{});
unpack_tos(?GOODS_DESTROY, B) ->?UNPACKTOS_REC([int32], #m_goods_destroy_tos{});
unpack_tos(?GOODS_SALE, B) ->?UNPACKTOS_REC([int32,int32], #m_goods_sale_tos{});
unpack_tos(?GOODS_SWAP, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_goods_swap_tos{});
unpack_tos(?GOODS_DIVIDE, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_goods_divide_tos{});
unpack_tos(?GOODS_TIDY, B) ->?UNPACKTOS_REC([int32], #m_goods_tidy_tos{});
unpack_tos(?GOODS_SHOW_GOODS, B) ->?UNPACKTOS_REC([string,string,int32,int32], #m_goods_show_goods_tos{});
unpack_tos(?ROLE2_LEVELUP, B) ->?UNPACKTOS_REC([], #m_role2_levelup_tos{});
unpack_tos(?ROLE2_UNBUND_CHANGE, B) ->?UNPACKTOS_REC([bool], #m_role2_unbund_change_tos{});
unpack_tos(?ROLE2_RELIVE, B) ->?UNPACKTOS_REC([int32], #m_role2_relive_tos{});
unpack_tos(?ROLE2_GETROLEATTR, B) ->?UNPACKTOS_REC([int32,bool], #m_role2_getroleattr_tos{});
unpack_tos(?ROLE2_PKMODEMODIFY, B) ->?UNPACKTOS_REC([int32], #m_role2_pkmodemodify_tos{});
unpack_tos(?ROLE2_SHOW_EQUIP_RING, B) ->?UNPACKTOS_REC([bool], #m_role2_show_equip_ring_tos{});
unpack_tos(?ROLE2_SEX, B) ->?UNPACKTOS_REC([], #m_role2_sex_tos{});
unpack_tos(?ROLE2_REMOVE_SKIN_BUFF, B) ->?UNPACKTOS_REC([], #m_role2_remove_skin_buff_tos{});
unpack_tos(?ROLE2_RENAME, B) ->?UNPACKTOS_REC([string], #m_role2_rename_tos{});
unpack_tos(?ROLE2_BUY_TILI, B) ->?UNPACKTOS_REC([], #m_role2_buy_tili_tos{});
unpack_tos(?ROLE2_DAILY_PRESENT, B) ->?UNPACKTOS_REC([], #m_role2_daily_present_tos{});
unpack_tos(?EXCHANGE_DEAL_ITEM, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_exchange_deal_item_tos{});
unpack_tos(?EXCHANGE_DEAL_SCORE, B) ->?UNPACKTOS_REC([], #m_exchange_deal_score_tos{});
unpack_tos(?SKILL_SETTING, B) ->?UNPACKTOS_REC([int32,{repeated,int32},int32], #m_skill_setting_tos{});
unpack_tos(?DEPOT_GET_GOODS, B) ->?UNPACKTOS_REC([int32,int32], #m_depot_get_goods_tos{});
unpack_tos(?DEPOT_DREDGE, B) ->?UNPACKTOS_REC([int32], #m_depot_dredge_tos{});
unpack_tos(?DEPOT_DESTROY, B) ->?UNPACKTOS_REC([int32], #m_depot_destroy_tos{});
unpack_tos(?DEPOT_SWAP, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_depot_swap_tos{});
unpack_tos(?DEPOT_DIVIDE, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_depot_divide_tos{});
unpack_tos(?DEPOT_TIDY, B) ->?UNPACKTOS_REC([int32], #m_depot_tidy_tos{});
unpack_tos(?DEPOT_EXTEND_ROW, B) ->?UNPACKTOS_REC([int32], #m_depot_extend_row_tos{});
unpack_tos(?SHORTCUT_UPDATE, B) ->?UNPACKTOS_REC([{repeated,p_shortcut},int32], #m_shortcut_update_tos{});
unpack_tos(?BUBBLE_SEND, B) ->?UNPACKTOS_REC([int32,string,int32], #m_bubble_send_tos{});
unpack_tos(?FAMILY_CREATE, B) ->?UNPACKTOS_REC([string,string,string,bool,int32], #m_family_create_tos{});
unpack_tos(?FAMILY_SELF, B) ->?UNPACKTOS_REC([], #m_family_self_tos{});
unpack_tos(?FAMILY_PANEL, B) ->?UNPACKTOS_REC([int32], #m_family_panel_tos{});
unpack_tos(?FAMILY_ENTER_MAP, B) ->?UNPACKTOS_REC([], #m_family_enter_map_tos{});
unpack_tos(?FAMILY_BOSS_INFO, B) ->?UNPACKTOS_REC([], #m_family_boss_info_tos{});
unpack_tos(?FAMILY_BOSS_CALL, B) ->?UNPACKTOS_REC([int32], #m_family_boss_call_tos{});
unpack_tos(?FAMILY_CALL_PARTYBOSS, B) ->?UNPACKTOS_REC([], #m_family_call_partyboss_tos{});
unpack_tos(?FAMILY_UPLEVEL, B) ->?UNPACKTOS_REC([], #m_family_uplevel_tos{});
unpack_tos(?FAMILY_REQUEST_LIST, B) ->?UNPACKTOS_REC([], #m_family_request_list_tos{});
unpack_tos(?FAMILY_LIST, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_family_list_tos{});
unpack_tos(?FAMILY_JOIN_LIMIT, B) ->?UNPACKTOS_REC([int32,int32], #m_family_join_limit_tos{});
unpack_tos(?FAMILY_REQUEST, B) ->?UNPACKTOS_REC([int32], #m_family_request_tos{});
unpack_tos(?FAMILY_BACKOUT, B) ->?UNPACKTOS_REC([int32], #m_family_backout_tos{});
unpack_tos(?FAMILY_INVITE, B) ->?UNPACKTOS_REC([string], #m_family_invite_tos{});
unpack_tos(?FAMILY_CANCEL_INVITE, B) ->?UNPACKTOS_REC([int32], #m_family_cancel_invite_tos{});
unpack_tos(?FAMILY_REFUSE, B) ->?UNPACKTOS_REC([int32], #m_family_refuse_tos{});
unpack_tos(?FAMILY_AGREE_F, B) ->?UNPACKTOS_REC([int32], #m_family_agree_f_tos{});
unpack_tos(?FAMILY_DISMISS, B) ->?UNPACKTOS_REC([], #m_family_dismiss_tos{});
unpack_tos(?FAMILY_SET_TITLE, B) ->?UNPACKTOS_REC([int32,string], #m_family_set_title_tos{});
unpack_tos(?FAMILY_SET_OWNER, B) ->?UNPACKTOS_REC([int32], #m_family_set_owner_tos{});
unpack_tos(?FAMILY_SET_SECOWNER_OR_ELDER, B) ->?UNPACKTOS_REC([int32,int32], #m_family_set_secowner_or_elder_tos{});
unpack_tos(?FAMILY_UNSET_SECOWNER_OR_ELDER, B) ->?UNPACKTOS_REC([int32,int32], #m_family_unset_secowner_or_elder_tos{});
unpack_tos(?FAMILY_UPDATE_NOTICE, B) ->?UNPACKTOS_REC([string,string], #m_family_update_notice_tos{});
unpack_tos(?FAMILY_REFUSE_F, B) ->?UNPACKTOS_REC([int32], #m_family_refuse_f_tos{});
unpack_tos(?FAMILY_FIRE, B) ->?UNPACKTOS_REC([int32], #m_family_fire_tos{});
unpack_tos(?FAMILY_AGREE, B) ->?UNPACKTOS_REC([int32], #m_family_agree_tos{});
unpack_tos(?FAMILY_LEAVE, B) ->?UNPACKTOS_REC([], #m_family_leave_tos{});
unpack_tos(?FAMILY_LEAVE_MAP, B) ->?UNPACKTOS_REC([], #m_family_leave_map_tos{});
unpack_tos(?FAMILY_CAN_INVITE, B) ->?UNPACKTOS_REC([], #m_family_can_invite_tos{});
unpack_tos(?FAMILY_CANCEL_TITLE, B) ->?UNPACKTOS_REC([int32], #m_family_cancel_title_tos{});
unpack_tos(?FAMILY_ENABLE_MAP, B) ->?UNPACKTOS_REC([], #m_family_enable_map_tos{});
unpack_tos(?FAMILY_CALLMEMBER, B) ->?UNPACKTOS_REC([string], #m_family_callmember_tos{});
unpack_tos(?FAMILY_MEMBER_ENTER_MAP, B) ->?UNPACKTOS_REC([int32], #m_family_member_enter_map_tos{});
unpack_tos(?FAMILY_ACTIVESTATE, B) ->?UNPACKTOS_REC([int32], #m_family_activestate_tos{});
unpack_tos(?FAMILY_GATHERREQUEST, B) ->?UNPACKTOS_REC([], #m_family_gatherrequest_tos{});
unpack_tos(?FAMILY_DETAIL, B) ->?UNPACKTOS_REC([int32], #m_family_detail_tos{});
unpack_tos(?FAMILY_SET_BONFIRE_START_TIME, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_family_set_bonfire_start_time_tos{});
unpack_tos(?FAMILY_GET_DONATE_INFO, B) ->?UNPACKTOS_REC([], #m_family_get_donate_info_tos{});
unpack_tos(?FAMILY_DONATE, B) ->?UNPACKTOS_REC([int32,int32], #m_family_donate_tos{});
unpack_tos(?FAMILY_AUTO_AGREE, B) ->?UNPACKTOS_REC([int32], #m_family_auto_agree_tos{});
unpack_tos(?FMLBONUS_LIST, B) ->?UNPACKTOS_REC([], #m_fmlbonus_list_tos{});
unpack_tos(?FMLBONUS_DONATE, B) ->?UNPACKTOS_REC([int32], #m_fmlbonus_donate_tos{});
unpack_tos(?FMLBONUS_SEND, B) ->?UNPACKTOS_REC([int32,{repeated,int32}], #m_fmlbonus_send_tos{});
unpack_tos(?FMLBONUS_SEND_HISTORY, B) ->?UNPACKTOS_REC([int32], #m_fmlbonus_send_history_tos{});
unpack_tos(?FMLBONUS_GET, B) ->?UNPACKTOS_REC([], #m_fmlbonus_get_tos{});
unpack_tos(?BROADCAST_GENERAL, B) ->?UNPACKTOS_REC([int32,int32,string,{repeated,int32},bool,int32,int32,int32], #m_broadcast_general_tos{});
unpack_tos(?BROADCAST_COUNTDOWN, B) ->?UNPACKTOS_REC([int32,int32,int32,string,int32,int32,{repeated,int32},bool,int32,int32,int32], #m_broadcast_countdown_tos{});
unpack_tos(?BROADCAST_ADMIN, B) ->?UNPACKTOS_REC([int32,int32,int32,string,int32,string,string,string,string,int32], #m_broadcast_admin_tos{});
unpack_tos(?BROADCAST_CYCLE, B) ->?UNPACKTOS_REC([int32,int32,string,int32,int32,int32,int32,{repeated,int32},bool,int32,int32,int32], #m_broadcast_cycle_tos{});
unpack_tos(?BROADCAST_LABA, B) ->?UNPACKTOS_REC([string,int32], #m_broadcast_laba_tos{});
unpack_tos(?SYSTEM_APNS, B) ->?UNPACKTOS_REC([string,string], #m_system_apns_tos{});
unpack_tos(?SYSTEM_HEARTBEAT, B) ->?UNPACKTOS_REC([int32], #m_system_heartbeat_tos{});
unpack_tos(?SYSTEM_CONFIG_CHANGE, B) ->?UNPACKTOS_REC([p_sys_config], #m_system_config_change_tos{});
unpack_tos(?GM_COMPLAINT, B) ->?UNPACKTOS_REC([int32,string,string], #m_gm_complaint_tos{});
unpack_tos(?GM_SCORE, B) ->?UNPACKTOS_REC([int32,int32], #m_gm_score_tos{});
unpack_tos(?RANKING_GET_RANK, B) ->?UNPACKTOS_REC([int32], #m_ranking_get_rank_tos{});
unpack_tos(?RANKING_ROLE_ALL_RANK, B) ->?UNPACKTOS_REC([int32], #m_ranking_role_all_rank_tos{});
unpack_tos(?TITLE_GET_ROLE_TITLES, B) ->?UNPACKTOS_REC([], #m_title_get_role_titles_tos{});
unpack_tos(?TITLE_CHANGE_CUR_TITLE, B) ->?UNPACKTOS_REC([int32], #m_title_change_cur_title_tos{});
unpack_tos(?ACTIVITY_TODAY, B) ->?UNPACKTOS_REC([int32], #m_activity_today_tos{});
unpack_tos(?ACTIVITY_PAY_GIFT_INFO, B) ->?UNPACKTOS_REC([int32], #m_activity_pay_gift_info_tos{});
unpack_tos(?ACTIVITY_GETGIFT, B) ->?UNPACKTOS_REC([int32,int32], #m_activity_getgift_tos{});
unpack_tos(?ACTIVITY_COMPLETION_INFO, B) ->?UNPACKTOS_REC([], #m_activity_completion_info_tos{});
unpack_tos(?ACTIVITY_COMPLETION_POINT, B) ->?UNPACKTOS_REC([int32], #m_activity_completion_point_tos{});
unpack_tos(?ACTIVITY_COMPLETION_FETCH, B) ->?UNPACKTOS_REC([int32], #m_activity_completion_fetch_tos{});
unpack_tos(?ACTIVITY_POINT_BUY, B) ->?UNPACKTOS_REC([int32,int32], #m_activity_point_buy_tos{});
unpack_tos(?ACTIVITY_BENEFIT_BUY, B) ->?UNPACKTOS_REC([int32], #m_activity_benefit_buy_tos{});
unpack_tos(?ACTIVITY_NOTICE_START, B) ->?UNPACKTOS_REC([int32], #m_activity_notice_start_tos{});
unpack_tos(?ACTIVITY_NOTICE_TRANSFER, B) ->?UNPACKTOS_REC([int32], #m_activity_notice_transfer_tos{});
unpack_tos(?ACTIVITY_SCHEDULE_INFO, B) ->?UNPACKTOS_REC([int32], #m_activity_schedule_info_tos{});
unpack_tos(?ACTIVITY_SCHEDULE_FETCH, B) ->?UNPACKTOS_REC([int32], #m_activity_schedule_fetch_tos{});
unpack_tos(?ACTIVITY_DAILY_PAY_REWARD, B) ->?UNPACKTOS_REC([int32], #m_activity_daily_pay_reward_tos{});
unpack_tos(?ACTIVITY_GATHER, B) ->?UNPACKTOS_REC([], #m_activity_gather_tos{});
unpack_tos(?ACTIVITY_FECTH, B) ->?UNPACKTOS_REC([int32], #m_activity_fecth_tos{});
unpack_tos(?ACTIVITY_YUNYING_INFO, B) ->?UNPACKTOS_REC([int32], #m_activity_yunying_info_tos{});
unpack_tos(?ACTIVITY_EXP_BACK_FETCH, B) ->?UNPACKTOS_REC([int32,int32], #m_activity_exp_back_fetch_tos{});
unpack_tos(?LEVEL_GIFT_ACCEPT, B) ->?UNPACKTOS_REC([int32], #m_level_gift_accept_tos{});
unpack_tos(?PET_SUMMON, B) ->?UNPACKTOS_REC([int32], #m_pet_summon_tos{});
unpack_tos(?PET_CALL_BACK, B) ->?UNPACKTOS_REC([int32], #m_pet_call_back_tos{});
unpack_tos(?PET_INFO, B) ->?UNPACKTOS_REC([int32,int32], #m_pet_info_tos{});
unpack_tos(?PET_BAG_INFO, B) ->?UNPACKTOS_REC([], #m_pet_bag_info_tos{});
unpack_tos(?PET_COLLECT_LIST, B) ->?UNPACKTOS_REC([int32], #m_pet_collect_list_tos{});
unpack_tos(?PET_COLLECT_EAT, B) ->?UNPACKTOS_REC([int32,int32,{repeated,p_pet_eat_item}], #m_pet_collect_eat_tos{});
unpack_tos(?PET_COLLECT_CHANGE, B) ->?UNPACKTOS_REC([int32], #m_pet_collect_change_tos{});
unpack_tos(?STAT_CLIENT_OS, B) ->?UNPACKTOS_REC([int32,string], #m_stat_client_os_tos{});
unpack_tos(?STAT_BROWSER, B) ->?UNPACKTOS_REC([string,string,string], #m_stat_browser_tos{});
unpack_tos(?PRESENT_GET, B) ->?UNPACKTOS_REC([int32], #m_present_get_tos{});
unpack_tos(?VIP_REMOTE_DEPOT, B) ->?UNPACKTOS_REC([], #m_vip_remote_depot_tos{});
unpack_tos(?VIP_STOP_NOTIFY, B) ->?UNPACKTOS_REC([int32], #m_vip_stop_notify_tos{});
unpack_tos(?VIP_REBACK_GOLD, B) ->?UNPACKTOS_REC([], #m_vip_reback_gold_tos{});
unpack_tos(?VIP_REWARD, B) ->?UNPACKTOS_REC([int32], #m_vip_reward_tos{});
unpack_tos(?VIP_REWARD_INFO, B) ->?UNPACKTOS_REC([], #m_vip_reward_info_tos{});
unpack_tos(?VIP_BUY_BUFF, B) ->?UNPACKTOS_REC([int32,int32], #m_vip_buy_buff_tos{});
unpack_tos(?VIP_GIFT, B) ->?UNPACKTOS_REC([int32], #m_vip_gift_tos{});
unpack_tos(?VIP_SELL_INFO, B) ->?UNPACKTOS_REC([], #m_vip_sell_info_tos{});
unpack_tos(?VIP_SELL, B) ->?UNPACKTOS_REC([int32], #m_vip_sell_tos{});
unpack_tos(?FMLSHOP_LIST, B) ->?UNPACKTOS_REC([], #m_fmlshop_list_tos{});
unpack_tos(?FMLSHOP_ADD, B) ->?UNPACKTOS_REC([int32], #m_fmlshop_add_tos{});
unpack_tos(?FMLSHOP_BUY, B) ->?UNPACKTOS_REC([int32], #m_fmlshop_buy_tos{});
unpack_tos(?SCENE_WAR_FB_QUERY, B) ->?UNPACKTOS_REC([int32,int32], #m_scene_war_fb_query_tos{});
unpack_tos(?FAMILY_SET_INTERIOR_MANAGER, B) ->?UNPACKTOS_REC([int32], #m_family_set_interior_manager_tos{});
unpack_tos(?FAMILY_UNSET_INTERIOR_MANAGER, B) ->?UNPACKTOS_REC([int32], #m_family_unset_interior_manager_tos{});
unpack_tos(?FAMILY_NOTIFY_ONLINE, B) ->?UNPACKTOS_REC([], #m_family_notify_online_tos{});
unpack_tos(?ACTIVITY_BOSS_GROUP, B) ->?UNPACKTOS_REC([int32,int32], #m_activity_boss_group_tos{});
unpack_tos(?RANKREWARD_FETCH_REWARD, B) ->?UNPACKTOS_REC([int32], #m_rankreward_fetch_reward_tos{});
unpack_tos(?NATIONBATTLE_ENTER, B) ->?UNPACKTOS_REC([int32], #m_nationbattle_enter_tos{});
unpack_tos(?NATIONBATTLE_QUIT, B) ->?UNPACKTOS_REC([], #m_nationbattle_quit_tos{});
unpack_tos(?NATIONBATTLE_TRANSFER, B) ->?UNPACKTOS_REC([int32], #m_nationbattle_transfer_tos{});
unpack_tos(?NATIONBATTLE_REWARD, B) ->?UNPACKTOS_REC([], #m_nationbattle_reward_tos{});
unpack_tos(?NATIONBATTLE_FETCH_REWARD, B) ->?UNPACKTOS_REC([], #m_nationbattle_fetch_reward_tos{});
unpack_tos(?PVE_FB_BUY_BUFF, B) ->?UNPACKTOS_REC([int32], #m_pve_fb_buy_buff_tos{});
unpack_tos(?CAISHEN_SILVER_INFO, B) ->?UNPACKTOS_REC([], #m_caishen_silver_info_tos{});
unpack_tos(?CAISHEN_SILVER_FETCH, B) ->?UNPACKTOS_REC([bool,int32], #m_caishen_silver_fetch_tos{});
unpack_tos(?CAISHEN_FIRECOIN_INFO, B) ->?UNPACKTOS_REC([], #m_caishen_firecoin_info_tos{});
unpack_tos(?CAISHEN_FIRECOIN_FETCH, B) ->?UNPACKTOS_REC([bool,int32], #m_caishen_firecoin_fetch_tos{});
unpack_tos(?CAISHEN_CONFIRM, B) ->?UNPACKTOS_REC([int32], #m_caishen_confirm_tos{});
unpack_tos(?SHENQI_EAT, B) ->?UNPACKTOS_REC([{repeated,int32},int32,int32,bool], #m_shenqi_eat_tos{});
unpack_tos(?SHENQI_TRANSFER, B) ->?UNPACKTOS_REC([int32,int32,bool,int32,int32,bool], #m_shenqi_transfer_tos{});
unpack_tos(?BIGPVE_ENTER, B) ->?UNPACKTOS_REC([int32], #m_bigpve_enter_tos{});
unpack_tos(?BIGPVE_QUIT, B) ->?UNPACKTOS_REC([], #m_bigpve_quit_tos{});
unpack_tos(?BIGPVE_BUY_BUFF, B) ->?UNPACKTOS_REC([int32], #m_bigpve_buy_buff_tos{});
unpack_tos(?MONSTER_WAR_HISTORY, B) ->?UNPACKTOS_REC([], #m_monster_war_history_tos{});
unpack_tos(?RNKM_OPEN, B) ->?UNPACKTOS_REC([], #m_rnkm_open_tos{});
unpack_tos(?RNKM_CLOSE, B) ->?UNPACKTOS_REC([], #m_rnkm_close_tos{});
unpack_tos(?RNKM_CHALLENGE, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_rnkm_challenge_tos{});
unpack_tos(?RNKM_ADD_CHANCE, B) ->?UNPACKTOS_REC([], #m_rnkm_add_chance_tos{});
unpack_tos(?RNKM_SCORE_DEAL, B) ->?UNPACKTOS_REC([int32,int32], #m_rnkm_score_deal_tos{});
unpack_tos(?RNKM_REFRESH, B) ->?UNPACKTOS_REC([], #m_rnkm_refresh_tos{});
unpack_tos(?FAMILY_WELFARE_GET, B) ->?UNPACKTOS_REC([], #m_family_welfare_get_tos{});
unpack_tos(?FAMILY_IDOL_OPEN, B) ->?UNPACKTOS_REC([], #m_family_idol_open_tos{});
unpack_tos(?FAMILY_IDOL_PRAY, B) ->?UNPACKTOS_REC([int32], #m_family_idol_pray_tos{});
unpack_tos(?TREASBOX_SHOW, B) ->?UNPACKTOS_REC([int32], #m_treasbox_show_tos{});
unpack_tos(?TREASBOX_OPEN, B) ->?UNPACKTOS_REC([int32,int32], #m_treasbox_open_tos{});
unpack_tos(?TREASBOX_GET, B) ->?UNPACKTOS_REC([], #m_treasbox_get_tos{});
unpack_tos(?TREASBOX_REFRESH, B) ->?UNPACKTOS_REC([], #m_treasbox_refresh_tos{});
unpack_tos(?NEWCOMER_ONLINETIME_FETCH, B) ->?UNPACKTOS_REC([], #m_newcomer_onlinetime_fetch_tos{});
unpack_tos(?GIFT_LIMITED_SHOW, B) ->?UNPACKTOS_REC([], #m_gift_limited_show_tos{});
unpack_tos(?GIFT_LIMITED_FETCH, B) ->?UNPACKTOS_REC([int32], #m_gift_limited_fetch_tos{});
unpack_tos(?ROLE_GOAL_FETCH, B) ->?UNPACKTOS_REC([int32], #m_role_goal_fetch_tos{});
unpack_tos(?ACHIEVEMENT_INFO, B) ->?UNPACKTOS_REC([], #m_achievement_info_tos{});
unpack_tos(?ACHIEVEMENT_FETCH, B) ->?UNPACKTOS_REC([int32], #m_achievement_fetch_tos{});
unpack_tos(?FUND_INFO, B) ->?UNPACKTOS_REC([], #m_fund_info_tos{});
unpack_tos(?FUND_ACTIVE, B) ->?UNPACKTOS_REC([int32], #m_fund_active_tos{});
unpack_tos(?FUND_FETCH, B) ->?UNPACKTOS_REC([int32], #m_fund_fetch_tos{});
unpack_tos(?FUND_LEVEL_BUY, B) ->?UNPACKTOS_REC([], #m_fund_level_buy_tos{});
unpack_tos(?FUND_LEVEL_INFO, B) ->?UNPACKTOS_REC([], #m_fund_level_info_tos{});
unpack_tos(?FUND_LEVEL_FETCH, B) ->?UNPACKTOS_REC([], #m_fund_level_fetch_tos{});
unpack_tos(?LOGIN_REWARD_INFO, B) ->?UNPACKTOS_REC([], #m_login_reward_info_tos{});
unpack_tos(?LOGIN_REWARD_FETCH, B) ->?UNPACKTOS_REC([], #m_login_reward_fetch_tos{});
unpack_tos(?TOWER_FB_ENTER, B) ->?UNPACKTOS_REC([int32,int32], #m_tower_fb_enter_tos{});
unpack_tos(?TOWER_FB_QUIT, B) ->?UNPACKTOS_REC([], #m_tower_fb_quit_tos{});
unpack_tos(?TOWER_FB_INFO, B) ->?UNPACKTOS_REC([], #m_tower_fb_info_tos{});
unpack_tos(?TOWER_FB_REWARD, B) ->?UNPACKTOS_REC([], #m_tower_fb_reward_tos{});
unpack_tos(?BEST_TOWER_FB_INFO, B) ->?UNPACKTOS_REC([], #m_best_tower_fb_info_tos{});
unpack_tos(?TOWER_FB_STATUS, B) ->?UNPACKTOS_REC([], #m_tower_fb_status_tos{});
unpack_tos(?TIME_ACTIVITY_INFO, B) ->?UNPACKTOS_REC([], #m_time_activity_info_tos{});
unpack_tos(?TIME_ACTIVITY_FETCH, B) ->?UNPACKTOS_REC([int32,int32], #m_time_activity_fetch_tos{});
unpack_tos(?TIME_ACTIVITY_ORG_FETCH, B) ->?UNPACKTOS_REC([int32], #m_time_activity_org_fetch_tos{});
unpack_tos(?VERSION_NOTICE, B) ->?UNPACKTOS_REC([], #m_version_notice_tos{});
unpack_tos(?ROOM_CREATE, B) ->?UNPACKTOS_REC([int32], #m_room_create_tos{});
unpack_tos(?ROOM_LIST, B) ->?UNPACKTOS_REC([int32,int32], #m_room_list_tos{});
unpack_tos(?ROOM_SELF, B) ->?UNPACKTOS_REC([int32], #m_room_self_tos{});
unpack_tos(?ROOM_JOIN, B) ->?UNPACKTOS_REC([int32,int32], #m_room_join_tos{});
unpack_tos(?ROOM_EXIT, B) ->?UNPACKTOS_REC([int32], #m_room_exit_tos{});
unpack_tos(?ROOM_KICK, B) ->?UNPACKTOS_REC([int32,int32], #m_room_kick_tos{});
unpack_tos(?COMMON_FB_ENTER, B) ->?UNPACKTOS_REC([int32,{repeated,int32}], #m_common_fb_enter_tos{});
unpack_tos(?COMMON_FB_QUIT, B) ->?UNPACKTOS_REC([], #m_common_fb_quit_tos{});
unpack_tos(?COMMON_FB_ENTER_TIMES, B) ->?UNPACKTOS_REC([int32], #m_common_fb_enter_times_tos{});
unpack_tos(?COMMON_FB_MIRRORS, B) ->?UNPACKTOS_REC([int32], #m_common_fb_mirrors_tos{});
unpack_tos(?COMPARE_SELL_INFO, B) ->?UNPACKTOS_REC([int32], #m_compare_sell_info_tos{});
unpack_tos(?COMPARE_SELL_FETCH, B) ->?UNPACKTOS_REC([int32,int32], #m_compare_sell_fetch_tos{});
unpack_tos(?TEAM_MIRROR_INFO, B) ->?UNPACKTOS_REC([int32], #m_team_mirror_info_tos{});
unpack_tos(?TEAM_MIRROR_ENTER, B) ->?UNPACKTOS_REC([int32,int32], #m_team_mirror_enter_tos{});
unpack_tos(?TEAM_MIRROR_QUIT, B) ->?UNPACKTOS_REC([int32], #m_team_mirror_quit_tos{});
unpack_tos(?TEAM_MIRROR_GET_FRIENDS, B) ->?UNPACKTOS_REC([int32], #m_team_mirror_get_friends_tos{});
unpack_tos(?FAMILY_WAR_USE_BUFF, B) ->?UNPACKTOS_REC([int32], #m_family_war_use_buff_tos{});
unpack_tos(?FAMILY_WAR_COMMIT_MEDICINE, B) ->?UNPACKTOS_REC([int32], #m_family_war_commit_medicine_tos{});
unpack_tos(?SUPER_MISSION_INFO, B) ->?UNPACKTOS_REC([], #m_super_mission_info_tos{});
unpack_tos(?SUPER_MISSION_OPT, B) ->?UNPACKTOS_REC([int32,int32], #m_super_mission_opt_tos{});
unpack_tos(?ACTIVITY_OPEN_ACTIVITY_STATUS, B) ->?UNPACKTOS_REC([], #m_activity_open_activity_status_tos{});
unpack_tos(?ACTIVITY_OPEN_ACTIVITY_INFO, B) ->?UNPACKTOS_REC([int32], #m_activity_open_activity_info_tos{});
unpack_tos(?ACTIVITY_OPEN_ACTIVITY_RANK, B) ->?UNPACKTOS_REC([int32], #m_activity_open_activity_rank_tos{});
unpack_tos(?DAILY_ACTIVITY_INFO, B) ->?UNPACKTOS_REC([], #m_daily_activity_info_tos{});
unpack_tos(?DAILY_ACTIVITY_COUNTER, B) ->?UNPACKTOS_REC([int32], #m_daily_activity_counter_tos{});
unpack_tos(?DAILY_ACTIVITY_FORECAST, B) ->?UNPACKTOS_REC([], #m_daily_activity_forecast_tos{});
unpack_tos(?CD_INFO, B) ->?UNPACKTOS_REC([int32], #m_cd_info_tos{});
unpack_tos(?CD_CLEAR, B) ->?UNPACKTOS_REC([int32], #m_cd_clear_tos{});
unpack_tos(?CD_FREE_HUNT, B) ->?UNPACKTOS_REC([int32], #m_cd_free_hunt_tos{});
unpack_tos(?DAILY_BENEFIT_INFO, B) ->?UNPACKTOS_REC([], #m_daily_benefit_info_tos{});
unpack_tos(?DAILY_BENEFIT_FETCH, B) ->?UNPACKTOS_REC([int32], #m_daily_benefit_fetch_tos{});
unpack_tos(?SHOP_SHOPS, B) ->?UNPACKTOS_REC([], #m_shop_shops_tos{});
unpack_tos(?SHOP_ALL_GOODS, B) ->?UNPACKTOS_REC([int32,int32], #m_shop_all_goods_tos{});
unpack_tos(?SHOP_ITEM, B) ->?UNPACKTOS_REC([int32,int32], #m_shop_item_tos{});
unpack_tos(?SHOP_SEARCH, B) ->?UNPACKTOS_REC([{repeated,int32},int32], #m_shop_search_tos{});
unpack_tos(?SHOP_BUY, B) ->?UNPACKTOS_REC([int32,int32,int32,int32], #m_shop_buy_tos{});
unpack_tos(?SHOP_SALE, B) ->?UNPACKTOS_REC([{repeated,p_shop_sale_goods}], #m_shop_sale_tos{});
unpack_tos(?SHOP_BUY_BACK, B) ->?UNPACKTOS_REC([int32,int32], #m_shop_buy_back_tos{});
unpack_tos(?SHOP_NPC, B) ->?UNPACKTOS_REC([int32], #m_shop_npc_tos{});
unpack_tos(?LOTTO_OPT, B) ->?UNPACKTOS_REC([int32,int32], #m_lotto_opt_tos{});
unpack_tos(?DANYAO_INFO, B) ->?UNPACKTOS_REC([int32], #m_danyao_info_tos{});
unpack_tos(?DANYAO_EAT, B) ->?UNPACKTOS_REC([int32,bool,bool], #m_danyao_eat_tos{});
unpack_tos(?SIGNIN_OPERATE, B) ->?UNPACKTOS_REC([int32], #m_signin_operate_tos{});
unpack_tos(?WILD_FB_ENTER, B) ->?UNPACKTOS_REC([int32], #m_wild_fb_enter_tos{});
unpack_tos(?WILD_FB_EXIT, B) ->?UNPACKTOS_REC([], #m_wild_fb_exit_tos{});
unpack_tos(?ROLE2_ENERGY, B) ->?UNPACKTOS_REC([], #m_role2_energy_tos{});
unpack_tos(?ROLE2_DAZEN_INFO, B) ->?UNPACKTOS_REC([], #m_role2_dazen_info_tos{});
unpack_tos(?ROLE2_DAZEN_FETCH, B) ->?UNPACKTOS_REC([int32], #m_role2_dazen_fetch_tos{});
unpack_tos(?PAYMENT_FETCH, B) ->?UNPACKTOS_REC([int32], #m_payment_fetch_tos{});
unpack_tos(?PAYMENT_REQUEST, B) ->?UNPACKTOS_REC([], #m_payment_request_tos{});
unpack_tos(?ROUND_PVP_HISTORY, B) ->?UNPACKTOS_REC([], #m_round_pvp_history_tos{});
unpack_tos(?ROUND_PVP_REWARD, B) ->?UNPACKTOS_REC([], #m_round_pvp_reward_tos{});
unpack_tos(?GENGU_INFO, B) ->?UNPACKTOS_REC([], #m_gengu_info_tos{});
unpack_tos(?GENGU_UPGRADE, B) ->?UNPACKTOS_REC([bool], #m_gengu_upgrade_tos{});
unpack_tos(?GENGU_AUTOUPGRADE, B) ->?UNPACKTOS_REC([], #m_gengu_autoupgrade_tos{});
unpack_tos(?QQ_AUTH, B) ->?UNPACKTOS_REC([string,p_qq_token,int32,string,string], #m_qq_auth_tos{});
unpack_tos(?QQ_BUY_GOLD, B) ->?UNPACKTOS_REC([int32,int32,int32,int32,int32,string,string], #m_qq_buy_gold_tos{});
unpack_tos(?HOLIDAY_ACT_OPERATE, B) ->?UNPACKTOS_REC([int32], #m_holiday_act_operate_tos{});
unpack_tos(?HOLIDAY_ACT_GOLD_HISTORY, B) ->?UNPACKTOS_REC([], #m_holiday_act_gold_history_tos{});
unpack_tos(?EQUIP_REBUILD, B) ->?UNPACKTOS_REC([int32,{repeated,int32}], #m_equip_rebuild_tos{});
unpack_tos(?EQUIP_BUILD_REFRESH, B) ->?UNPACKTOS_REC([], #m_equip_build_refresh_tos{});
unpack_tos(?EQUIP_BUILD, B) ->?UNPACKTOS_REC([int32,int32,int32], #m_equip_build_tos{});
unpack_tos(?EQUIP_BUILD_LIST, B) ->?UNPACKTOS_REC([], #m_equip_build_list_tos{});
unpack_tos(?HANGING_STAT, B) ->?UNPACKTOS_REC([], #m_hanging_stat_tos{});
unpack_tos(?HANGING_WATCH_RESULT, B) ->?UNPACKTOS_REC([int32], #m_hanging_watch_result_tos{});
unpack_tos(?HANGING_ROUND_START, B) ->?UNPACKTOS_REC([int32], #m_hanging_round_start_tos{});
unpack_tos(?HANGING_CONTINUE, B) ->?UNPACKTOS_REC([], #m_hanging_continue_tos{});
unpack_tos(?EQUIP_FOSTER_REFRESH, B) ->?UNPACKTOS_REC([int32,int32,int32,bool], #m_equip_foster_refresh_tos{});
unpack_tos(?EQUIP_FOSTER_SAVE, B) ->?UNPACKTOS_REC([int32,int32,bool], #m_equip_foster_save_tos{});
unpack_tos(?EQUIP_FOSTER_TRANSFER, B) ->?UNPACKTOS_REC([int32,int32,bool,int32,int32,bool], #m_equip_foster_transfer_tos{});
unpack_tos(?STONE_OPT, B) ->?UNPACKTOS_REC([int32,int32,int32,int32,int32], #m_stone_opt_tos{});
unpack_tos(?STONE_EAT, B) ->?UNPACKTOS_REC([int32,int32,int32,int32,{repeated,p_stone_eat}], #m_stone_eat_tos{});
unpack_tos(?MAIN_FB_SELECT, B) ->?UNPACKTOS_REC([int32,int32,{repeated,int32}], #m_main_fb_select_tos{});
unpack_tos(?MAIN_FB_SWEEP, B) ->?UNPACKTOS_REC([int32], #m_main_fb_sweep_tos{});
unpack_tos(?MAIN_FB_BUY, B) ->?UNPACKTOS_REC([], #m_main_fb_buy_tos{});
unpack_tos(?MAIN_FB_QUICK, B) ->?UNPACKTOS_REC([], #m_main_fb_quick_tos{});
unpack_tos(?FMLMATCH_INFO, B) ->?UNPACKTOS_REC([], #m_fmlmatch_info_tos{});
unpack_tos(?FMLMATCH_VIEW_FIGHTING, B) ->?UNPACKTOS_REC([int32], #m_fmlmatch_view_fighting_tos{});
unpack_tos(?EQUIP_SHARE_LIST, B) ->?UNPACKTOS_REC([], #m_equip_share_list_tos{});
unpack_tos(?EQUIP_SHARE_SYNC, B) ->?UNPACKTOS_REC([], #m_equip_share_sync_tos{});
unpack_tos(?EQUIP_SHARE_REQUEST, B) ->?UNPACKTOS_REC([int32], #m_equip_share_request_tos{});
unpack_tos(?EQUIP_SHARE_AGREE, B) ->?UNPACKTOS_REC([int32], #m_equip_share_agree_tos{});
unpack_tos(?EQUIP_SHARE_REMOVE, B) ->?UNPACKTOS_REC([], #m_equip_share_remove_tos{});
unpack_tos(?EQUIP_SHARE_REQUESTER_DEL, B) ->?UNPACKTOS_REC([int32], #m_equip_share_requester_del_tos{});
unpack_tos(?ROLE2_JINGMAI, B) ->?UNPACKTOS_REC([int32], #m_role2_jingmai_tos{});
unpack_tos(?SINGLE_FB_FIGHT, B) ->?UNPACKTOS_REC([int32], #m_single_fb_fight_tos{});
unpack_tos(?FAMILY_FB_INFO, B) ->?UNPACKTOS_REC([], #m_family_fb_info_tos{});
unpack_tos(?FAMILY_FB_FIGHT, B) ->?UNPACKTOS_REC([], #m_family_fb_fight_tos{});
unpack_tos(?DOWNLOAD_TASK_INFO, B) ->?UNPACKTOS_REC([], #m_download_task_info_tos{});
unpack_tos(?DOWNLOAD_TASK_FETCH, B) ->?UNPACKTOS_REC([int32], #m_download_task_fetch_tos{});
unpack_tos(?GRAB_OPEN, B) ->?UNPACKTOS_REC([], #m_grab_open_tos{});
unpack_tos(?GRAB_CHALLENGE, B) ->?UNPACKTOS_REC([int32,int32], #m_grab_challenge_tos{});
unpack_tos(?GRAB_FAST_FIGHT, B) ->?UNPACKTOS_REC([int32,int32], #m_grab_fast_fight_tos{});
unpack_tos(?GRAB_REFRESH, B) ->?UNPACKTOS_REC([], #m_grab_refresh_tos{});
unpack_tos(?GRAB_SELECT_REWARD, B) ->?UNPACKTOS_REC([int32], #m_grab_select_reward_tos{});
unpack_tos(?GRAB_ADD_PROTECT, B) ->?UNPACKTOS_REC([int32], #m_grab_add_protect_tos{});
unpack_tos(?GRAB_ADD_CHANCE, B) ->?UNPACKTOS_REC([], #m_grab_add_chance_tos{});
unpack_tos(?GUIDE_INFO, B) ->?UNPACKTOS_REC([], #m_guide_info_tos{});
unpack_tos(?GUIDE_FINISH, B) ->?UNPACKTOS_REC([int32], #m_guide_finish_tos{});
unpack_tos(?MISSION_LIST, B) ->?UNPACKTOS_REC([], #m_mission_list_tos{});
unpack_tos(?MISSION_DO, B) ->?UNPACKTOS_REC([int32,int32], #m_mission_do_tos{});
unpack_tos(?MISSION_CANCEL, B) ->?UNPACKTOS_REC([int32], #m_mission_cancel_tos{});
unpack_tos(?MISSION_LIST_AUTO, B) ->?UNPACKTOS_REC([], #m_mission_list_auto_tos{});
unpack_tos(?MISSION_DO_AUTO, B) ->?UNPACKTOS_REC([int32], #m_mission_do_auto_tos{});
unpack_tos(?MISSION_CANCEL_AUTO, B) ->?UNPACKTOS_REC([int32], #m_mission_cancel_auto_tos{});
unpack_tos(?MISSION_TOUCH_SET, B) ->?UNPACKTOS_REC([int32], #m_mission_touch_set_tos{});
unpack_tos(?MISSION_SHOW_PROP, B) ->?UNPACKTOS_REC([int32,int32], #m_mission_show_prop_tos{});
unpack_tos(?MISSION_STAR, B) ->?UNPACKTOS_REC([int32], #m_mission_star_tos{});
unpack_tos(?CHAT_AUTH, B) ->?UNPACKTOS_REC([string,int32,string,int32], #m_chat_auth_tos{});
unpack_tos(?CHAT_IN_CHANNEL, B) ->?UNPACKTOS_REC([string,string], #m_chat_in_channel_tos{});
unpack_tos(?CHAT_IN_PAIRS, B) ->?UNPACKTOS_REC([string,string,int32], #m_chat_in_pairs_tos{});
unpack_tos(?CHAT_ADD_BLACK, B) ->?UNPACKTOS_REC([string], #m_chat_add_black_tos{});
unpack_tos(?CHAT_REMOVE_BLACK, B) ->?UNPACKTOS_REC([string], #m_chat_remove_black_tos{});
unpack_tos(?CHAT_GET_ROLES, B) ->?UNPACKTOS_REC([string], #m_chat_get_roles_tos{});
unpack_tos(?CHAT_GET_GOODS, B) ->?UNPACKTOS_REC([int32], #m_chat_get_goods_tos{});
unpack_tos(?CHAT_KING_BAN, B) ->?UNPACKTOS_REC([int32,string,int32], #m_chat_king_ban_tos{});
unpack_tos(MethodID, _) -> throw({illegal_method_id, MethodID}).

unpack_record(_, <<>>, _, Record) -> {Record, <<>>};
unpack_record([], Bin, _, Record) -> {Record, Bin};
unpack_record([Type|T], Bin, I, Record) ->
    case Type of 
        bool ->
            <<Val2:8/integer-signed, Rem/binary>> = Bin,
            Val = Val2 > 0;
        int32 ->
            <<Val:32/integer-signed, Rem/binary>> = Bin;
        double ->
            <<Val:64/big-float, Rem/binary>> = Bin;
        string ->
            <<Len:16, Val2:Len/binary-unit:8, Rem/binary>> = Bin,
			Val = ?STRING(Val2);
        {repeated, Type2} ->
            <<Len:16, Rem2/binary>> = Bin,
            {Val, Rem} = unpack_list(Type2, Rem2, Len, []);
        RecTag ->
            {Val, Rem} = unpack(RecTag, Bin)
    end,
    unpack_record(T, Rem, I+1, setelement(I, Record, Val)).

unpack_list(_Type, <<>>, _, Result) -> {lists:reverse(Result), <<>>};
unpack_list(_Type, Bin, 0, Result) -> {lists:reverse(Result), Bin};
unpack_list(Type, Bin, Len, Result) ->
    case Type of 
        bool ->
            <<Val2:8/integer-signed, Rem/binary>> = Bin,
            Val = Val2 > 0;
        int32 ->
            <<Val:32/integer-signed, Rem/binary>> = Bin;
        double ->
            <<Val:64/big-float, Rem/binary>> = Bin;
        string ->
            <<Len:16, Val2:Len/binary-unit:8, Rem/binary>> = Bin,
			Val = ?STRING(Val2);
        RecTag ->
            {Val, Rem} = unpack(RecTag, Bin)
    end,
    unpack_list(Type, Rem, Len-1, [Val|Result]).